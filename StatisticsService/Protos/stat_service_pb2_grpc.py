# Generated by the gRPC Python protocol compiler plugin. DO NOT EDIT!
"""Client and server classes corresponding to protobuf-defined services."""
import grpc

import Protos.stat_service_pb2 as stat__service__pb2


class StatisticServiceStub(object):
    """Missing associated documentation comment in .proto file."""

    def __init__(self, channel):
        """Constructor.

        Args:
            channel: A grpc.Channel.
        """
        self.GetTaskStatistic = channel.unary_unary(
                '/statistics.StatisticService/GetTaskStatistic',
                request_serializer=stat__service__pb2.TaskStatRequest.SerializeToString,
                response_deserializer=stat__service__pb2.TaskStatResponse.FromString,
                )
        self.GetPopularTask = channel.unary_unary(
                '/statistics.StatisticService/GetPopularTask',
                request_serializer=stat__service__pb2.PopularTaskRequest.SerializeToString,
                response_deserializer=stat__service__pb2.PopularTaskResponse.FromString,
                )
        self.GetPopularUser = channel.unary_unary(
                '/statistics.StatisticService/GetPopularUser',
                request_serializer=stat__service__pb2.Empty.SerializeToString,
                response_deserializer=stat__service__pb2.PopularUserResponse.FromString,
                )


class StatisticServiceServicer(object):
    """Missing associated documentation comment in .proto file."""

    def GetTaskStatistic(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def GetPopularTask(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def GetPopularUser(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')


def add_StatisticServiceServicer_to_server(servicer, server):
    rpc_method_handlers = {
            'GetTaskStatistic': grpc.unary_unary_rpc_method_handler(
                    servicer.GetTaskStatistic,
                    request_deserializer=stat__service__pb2.TaskStatRequest.FromString,
                    response_serializer=stat__service__pb2.TaskStatResponse.SerializeToString,
            ),
            'GetPopularTask': grpc.unary_unary_rpc_method_handler(
                    servicer.GetPopularTask,
                    request_deserializer=stat__service__pb2.PopularTaskRequest.FromString,
                    response_serializer=stat__service__pb2.PopularTaskResponse.SerializeToString,
            ),
            'GetPopularUser': grpc.unary_unary_rpc_method_handler(
                    servicer.GetPopularUser,
                    request_deserializer=stat__service__pb2.Empty.FromString,
                    response_serializer=stat__service__pb2.PopularUserResponse.SerializeToString,
            ),
    }
    generic_handler = grpc.method_handlers_generic_handler(
            'statistics.StatisticService', rpc_method_handlers)
    server.add_generic_rpc_handlers((generic_handler,))


 # This class is part of an EXPERIMENTAL API.
class StatisticService(object):
    """Missing associated documentation comment in .proto file."""

    @staticmethod
    def GetTaskStatistic(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/statistics.StatisticService/GetTaskStatistic',
            stat__service__pb2.TaskStatRequest.SerializeToString,
            stat__service__pb2.TaskStatResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def GetPopularTask(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/statistics.StatisticService/GetPopularTask',
            stat__service__pb2.PopularTaskRequest.SerializeToString,
            stat__service__pb2.PopularTaskResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def GetPopularUser(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/statistics.StatisticService/GetPopularUser',
            stat__service__pb2.Empty.SerializeToString,
            stat__service__pb2.PopularUserResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)
